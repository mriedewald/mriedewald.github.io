<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>CS 3200: Database Design</title>
<style type="text/css">
.style1 {
	text-align: left;
}
.style2 {
	font-weight: bold;
	text-align: center;
}
</style>
</head>

<body>

<h2>CS 3200: Database Design</h2>
<p>This course studies the design of a database for use in a relational database 
management system. The entity-relationship model and normalization will be used 
in example problems. Relational algebra and the SQL language will be presented. 
Advanced topics include triggers, stored procedures, indexing, elementary query 
optimization, and fundamentals of concurrency and recovery. Students will 
implement a database schema and short application programs on a 
commercial relational database management system. </p><hr>
<h3>News</h3>
<p>[04/12/2012] All material up to the 4/11 lecture, including the final exam 
study guide, is now online. Good luck with the exam preparation!</p>
<hr>
<h3>Lectures</h3>
<p>(Future lectures and events are tentative.)</p>
<table border="1" width="100%" id="table1">
	<tr>
		<td style="width: 61px"><b>Date</b></td>
		<td align="center" style="width: 341px"><b>Topic</b></td>
		<td class="style2">Remarks and Recommended Homework</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 9</td>
		<td align="center" style="width: 341px">
		<a href="Slides/Introduction.pdf">Introduction</a></td>
		<td class="style1">Read introduction chapter in textbook</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 11</td>
		<td align="center" style="width: 341px">
		Entity Relationship Model (ERM)</td>
		<td class="style1">Read in your favorite textbook about modeling 
		entities and their relationships using ERM. (UML is conceptually the 
		same, just with different pictures.) Things to focus on: What are keys? 
		How is the primary key of an entity set selected? How is the primary key 
		of a relationship set determined? How do we model key and participation 
		constraints (e.g., 1-to-1, 1-to-many, many-to-1, many-to-many)? How does 
		the corresponding SQL code look like? And how can we enforce referential 
		integrity (foreign key references) and control the database's reaction 
		to a potential violation?</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 16</td>
		<td align="center" style="width: 341px">
		No class: MLK Day</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 18</td>
		<td align="center" style="width: 341px">
		ERM continued</td>
		<td class="style1">Study the advanced concepts: weak entities, 
		hierarchies (&quot;ISA&quot;), and aggregation. Go over the design alternatives we 
		discussed and make sure you understand their tradeoffs: entity vs. 
		attribute, entity vs. relationship, binary vs. ternary relationships. 
		For each example we discussed, create the corresponding relations and 
		write the SQL code. Make sure you specify the required primary keys, 
		foreign key references, and NOT NULL constraints.</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 20</td>
		<td align="center" style="width: 341px">
		HW 1: early submission (11pm)</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 23</td>
		<td align="center" style="width: 341px">
		ERM completed; Relational algebra</td>
		<td class="style1">Study the relational operators and make sure you 
		could compute their results for given example relations. Take the 
		example &quot;queries&quot;, hide the algebra expression, and now try to find the 
		expression yourself. Then try to modify the query to find other 
		information in the example database.</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 24</td>
		<td align="center" style="width: 341px">
		HW 1 due (11pm)</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 25</td>
		<td align="center" style="width: 341px">
		Relational algebra, relational calculus</td>
		<td class="style1">Continue practicing how to write relational algebra 
		expressions for a given query. Write down the schema of intermediate results 
		to catch mistakes like the &quot;topic=DB AND topic=PL&quot; selection condition 
		we discussed. 
		Draw the query plan and think about how pushing down selections and 
		projections can reduce cost. Review the definition of formulas and the 
		example for queries in DRC.</td>
	</tr>
	<tr>
		<td style="width: 61px">Jan 30</td>
		<td align="center" style="width: 341px">
		Relational calculus, SQL</td>
		<td class="style1">Try to write calculus expressions, starting with the 
		examples we discussed and then modifying the queries. Make sure you know 
		how to express joins in DRC. Practice writing SQL queries. You can 
		create the example tables in the DB server, add a few example tuples, 
		and then try out your queries. Then modify the queries and see what 
		happens. For a given basic SELECT-FROM-WHERE and for nested SQL queries 
		such as the ones we discussed, you should be able to manually compute 
		the result on a given database.</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 01</td>
		<td align="center" style="width: 341px">
		SQL</td>
		<td class="style1">Review the &quot;students who reserved all books&quot; query in 
		SQL and compare it to the algebra and calculus expressions. Go over the 
		conceptual evaluation algorithm for queries with GROUP BY and 
		aggregation. Pay particular attention to the following: which attributes 
		can appear in the SELECT clause and which cannot? What is different 
		between a condition in the WHERE clause versus the HAVING clause? Try 
		different versions of the aggregate queries, including the incorrect 
		ones, in the real database and see what happens.</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 6</td>
		<td align="center" style="width: 341px">
		Advanced SQL</td>
		<td class="style1">Study the issues related to NULL and the various 
		subtleties we discussed in class. Create a view in the Postgres 
		database. Run SELECT * on the view and observe the result. Then modify 
		some of the view's base tables, run SELECT * again, and see how the 
		result differs. Add some CHECK constraints to your database tables. Then 
		try to perform an update that would violate a constraint. What happens? 
		Also, try to write a CHECK constraint that computes an aggregate on the 
		table or refers to data in another table.</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 8</td>
		<td align="center" style="width: 341px">
		Advanced SQL<br><br>HW 2 due (11pm)</td>
		<td class="style1">Review SQL functions: function parameters and using 
		them to parameterize a query, calling functions, using functions in the 
		FROM clause, basic definition of user-defined aggregates. Review 
		triggers: distinction between event, condition, and action. What are 
		possible events? How can we specify conditions and actions? Try to write 
		your own function or trigger and run it in Postgres. For a trigger, try 
		to make it fire by executing the appropriate event.</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 13</td>
		<td align="center" style="width: 341px">
		PL/pgSQL functions; Transactions</td>
		<td class="style1">Write a trigger function that uses conditionals (IF, 
		CASE) and loops (LOOP, WHILE, FOR). Make the trigger fire and see if it 
		behaves as expected. Run the somefunc() function we discussed in class 
		and see if the printed value of variable 'quantity' is indeed as 
		claimed. Experiment with the scope of variables by renaming variable 
		'quantity' in the local scope declaration to 'quant' and see if the 
		function output changes. Review the discussion about transactions.</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 15</td>
		<td align="center" style="width: 341px">
		Transactions</td>
		<td class="style1">Make sure you understand the meaning of the ACID 
		properties. Go over the WR, RW, WW anomaly examples and identify which 
		ACID properties they violate. Then explore how Strict 2PL would prevent 
		these anomalies by going step-by-step through the examples. How can 
		Strict 2PL result in deadlocks?</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 20</td>
		<td align="center" style="width: 341px">
		No class: Presidents' Day</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 22</td>
		<td align="center" style="width: 341px">
		Transactions; JDBC &amp; Co.</td>
		<td class="style1">Study the phantom problem and how to prevent 
		it. Try creating transactions and running them on Postgres. Why do we 
		need a cursor when accessing a database from an application. Look 
		carefully at the example of SQL embedded in C and identify how the 
		cursor is used for accessing the Students table.</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 27</td>
		<td align="center" style="width: 341px">
		JDBC</td>
		<td class="style1">Look carefully at the JDBC examples (update and 
		query) and try to run them from your machine. (For the update, replace 
		the SQL part with a data update.) Make some modifications by using the 
		API calls we discussed, e.g., try running a transaction.</td>
	</tr>
	<tr>
		<td style="width: 61px">Feb 29</td>
		<td align="center" style="width: 341px">
		Storage and Indexing</td>
		<td class="style1">Study heap file, sorted file, and B+ tree. Think 
		about how they affect query and update cost. Make sure you understand 
		how equality and inequality queries are processed by a B+ tree. What is 
		different between storing the actual data records in the tree's leaf 
		nodes compared to only storing data entries that point (through RIDs) to 
		these records in a separate heap file?</td>
	</tr>
	<tr>
		<td style="width: 61px">Mar 1</td>
		<td align="center" style="width: 341px">
		HW 3 due (11pm)</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">Mar 5, 7</td>
		<td align="center" style="width: 341px">
		No classes: Spring Break</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">Mar 12</td>
		<td align="center" style="width: 341px">
		<strong>Midterm Exam</strong></td>
		<td class="style1">Same time and location as lectures.</td>
	</tr>
	<tr>
		<td style="width: 61px">Mar 14</td>
		<td align="center" style="width: 341px">
		Storage and Indexing</td>
		<td class="style1">Study the difference between clustered and 
		unclustered indexes. Review static hashing. Go over the approximate cost 
		estimation results for the five different operations (scan, equality 
		query, range query, insert, delete) and five different file 
		organizations (heap file, sorted file, clustered tree index, unclustered 
		tree index + heap file, unclustered hash index + heap file).</td>
	</tr>
	<tr>
		<td style="width: 61px">Mar 19</td>
		<td align="center" style="width: 341px">
		Storage and Indexing</td>
		<td class="style1">Review the general approach for choosing appropriate 
		indexes. Go carefully through the various examples. For practice, only 
		look at the query and then try to decide on the best index structure on 
		your own.</td>
	</tr>
	<tr>
		<td style="width: 61px">Mar 21</td>
		<td align="center" style="width: 341px">
		Storage and Indexing; Query Optimization</td>
		<td class="style1">Continue reviewing the query examples and their index 
		choices. Focus on composite search keys, combining index results 
		(intersection of RID lists), and index-only plans. Look at some query 
		examples, including those from HW 3, and try to create some 
		corresponding query plans.</td>
	</tr>
	<tr>
		<td style="width: 61px">Mar 26</td>
		<td align="center" style="width: 341px">
		Query Optimization<br><br>HW 4 due (11pm)</td>
		<td class="style1">Review the query plans and cost computation for 
		selection, projection, and join. Read more about query optimization in 
		the textbook.</td>
	</tr>
	<tr>
		<td style="width: 61px">Mar 28</td>
		<td align="center" style="width: 341px">
		Normal Forms</td>
		<td class="style1">Study functional dependencies, Armstrong's axioms, 
		and the Boyce-Codd Normal Form (BCNF). Think about the tradeoffs of 
		decomposition: redundancy versus query/constraint checking cost.</td>
	</tr>
	<tr>
		<td style="width: 61px">Apr 2</td>
		<td align="center" style="width: 341px">
		Query Optimization</td>
		<td class="style1">Go over the query plan examples and try to compute 
		the I/O cost on your own.</td>
	</tr>
	<tr>
		<td style="width: 61px">Apr 4</td>
		<td align="center" style="width: 341px">
		Recovery</td>
		<td class="style1">Read about the details of ARIES in your textbook.</td>
	</tr>
	<tr>
		<td style="width: 61px">Apr 9</td>
		<td align="center" style="width: 341px">
		Security; SQL Injection<br><br>HW 5 due (11pm)</td>
		<td class="style1">Read about basic access control (GRANT) in your 
		textbook.</td>
	</tr>
	<tr>
		<td style="width: 61px">Apr 11</td>
		<td align="center" style="width: 341px">
		Data Warehousing and OLAP; Data Mining</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">Apr 16</td>
		<td align="center" style="width: 341px">
		No class: Patriots' Day</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">Apr 18</td>
		<td align="center" style="width: 341px">
		Last class</td>
		<td class="style1">&nbsp;</td>
	</tr>
	<tr>
		<td style="width: 61px">&nbsp;</td>
		<td align="center" style="width: 341px">
		Final Exam (time and location TBD)</td>
		<td class="style1">&nbsp;</td>
	</tr>
	</table>
<hr>
<h3>Course Information</h3>
<p>Instructor: <a target="_top" href="http://www.ccs.neu.edu/home/mirek/">Mirek 
Riedewald</a> </p>
<ul>
	<li>Office hours: Tuesday 1:30-3pm in 332 WVH</li>
	<li>Just send email to set up an appointment if you cannot make it during these 
	times</li>
</ul>
<p>TA: Bahar Qarabaqi</p>
<ul>
	<li>Office hours: Monday 11am-noon, Wednesday 11am-noon, Friday 2-3pm in a lab or in 472 WVH</li>
</ul>
<p>Lecture times: MW 2:50 - 4:30pm<br>
Lecture location: WVH 108</p>
<h3>Prerequisites</h3>
<p>CS 2510 (CS U213)</p>
<h3>Grading</h3>
<ul>
	<li>Homework: 50%</li>
	<li>Midterm: 20%</li>
	<li>Final exam: 25%</li>
	<li>Participation: 5%</li>
</ul>
<h3>Recommended Textbooks</h3>
<ul>
	<li>Database Management Systems (3rd edition) by Ramakrishnan and Gehrke</li>
	<li>A First Course in Database Systems (3rd edition) by Ullman and Widom</li>
	<li>Fundamentals of Database Systems (6th edition) by Elmasri and Navathe</li>
	<li>Database System Concepts (6th edition) by Silberschatz, Korth, and 
	Sudarshan </li>
</ul>
<h3>Academic Integrity Policy</h3>
<p>A commitment to the principles of academic integrity is essential to the 
mission of Northeastern University. The promotion of independent and original 
scholarship ensures that students derive the most from their educational 
experience and their pursuit of knowledge. Academic dishonesty violates the most 
fundamental values of an intellectual community and undermines the achievements 
of the entire University.</p>
<p>For more information, please refer to the
<a href="http://www.northeastern.edu/osccr/academichonesty.html">Academic 
Integrity</a> Web page.</p>

</body>

</html>
